DEFINE COMPONENT Pol_IdealWSP
SETTING PARAMETERS (xwidth, yheight, zdepth, By=0)
OUTPUT PARAMETERS()
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
double IntersectWall(double pos, double vel, double wallpos) {
    /* Function to calculate where the neutron hit the wall */

    if(vel==0)
      return -1;
    
    if(vel>0)
      return (wallpos-pos)/vel;
    else 
      return (-wallpos-pos)/vel;
  }

/* In this component, x and y will translate to y and z respectively */
#pragma acc routine
double intersect_lines(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4) {
  double numerator, denominator, t;
  numerator = (x1 - x3) * (y3 - y4) - (y1 - y3)*(x3 - x4);
  denominator = (x1 - x2) * (y3 - y4) - (y1 - y2)*(x3 - x4);
  t = numerator / denominator;
  // This will return the intersection coordinate y, which corresponds to z below
  return y1 + t * (y2 - y1);
}
%}

DECLARE
%{
  /* Larmor frequency */
  double omegaLplus;
  double omegaLmin;
%}

INITIALIZE
%{
  omegaLplus = 0;  
  omegaLmin = 0;  


  double velocity = 0, time = 0;
  
  if ((xwidth<=0) || (yheight<=0) || (zdepth<=0)) {
    fprintf(stderr, "Pol_filter: %s: Null or negative volume!\n"
	    "ERROR      (xwidth, yheight, zdepth). Exiting\n",
	    NAME_CURRENT_COMP);
    exit(1);
  }
  // 1.832472e8 is the neutron gyromagnetic, current use half
  // to compensate for unexpected doubling (???)
  omegaLmin	  = -9.16236e7 * (-By);
  omegaLplus = -9.16236e7 * (By);
  %}

TRACE
%{
  double deltaT, deltaTx, deltaTy, sx_in1, sz_in1, sx_in2, sz_in2, iz, denom, deltaTpos, deltaTmin, phi;
  
  PROP_Z0;
  if (!inside_rectangle(x, y, xwidth, yheight))
    ABSORB;
  
  // Time spent in the prism
  deltaT = zdepth/vz;

  iz = intersect_lines(y,0,y+vy,vz, -yheight/2, 0, yheight/2, zdepth);
  // Time spent in + field (the rest is in - field)
  deltaTpos	= iz/vz;

  // if the particle is out of bounds after propagating at given velocity (vx,vy) for a time deltaT,
  // propagate it until it intersects the wall where it is absorbed
  if (!inside_rectangle(x+vx*deltaT, y+vy*deltaT, xwidth, yheight)) {
    
    // Propagate to the wall and absorb
    deltaTx = IntersectWall(x, vx, xwidth/2);
    deltaTy = IntersectWall(y, vy, yheight/2);

    if (deltaTx>=0 && deltaTx<deltaTy)
      deltaT = deltaTx;
    else
      deltaT = deltaTy;
    
    PROP_DT(deltaT);  
    
    ABSORB;
  }  
  
  PROP_DT(deltaT);  
  
  // These are the incoming spin directions 
  sx_in1 = sx;
  sz_in1 = sz;
  deltaTmin = deltaT - deltaTpos; 
  phi = omegaLplus*deltaTpos + omegaLmin*deltaTmin;

  // This calculated the spin rotation caused by the triangular field
  sz = cos(phi)*sz_in1 - sin(phi)*sx_in1;
  sx = sin(phi)*sz_in1 + cos(phi)*sx_in1;
  %}

MCDISPLAY
%{  
  box(0, 0, 0, xwidth, yheight, zdepth);
%}

END
