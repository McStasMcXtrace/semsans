/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_triafield
* 
* %I
* Written by: Morten Sales, based on Pol_constBfield by Peter Christiansen
* Date: 2013
* Origin: Helmholtz-Zentrum Berlin
*
* Constant magnetic field in a isosceles triangular coil
*
* %D
*
* Rectangular box with constant B field along y-axis (up) in a isosceles triangle. 
* There is a guide (or precession) field as well. It is along y in the entire rectangular box.
* A neutron hitting outside the box opening or the box sides is absorbed.
*
*
*     __________________
*    |        /\        |
*    |       /  \       |      y
*    |      /    \      |      ^
*    |     /      \     |      |
*    |    /   B    \    |      |-----> z
*    |   /          \   |
*    |  /            \  |
*    | /              \ |
*    |/________________\|
*
* The angle of the inclination of the triangular field boundary is given by the arctangent to xwidth/(0.5*zdepth)
*
* This component does NOT take gravity into account.
*
* Example: Pol_triafield_y(xwidth=0.1, yheight=0.1, zdepth=0.2, B=1e-3)
*
* %P
* INPUT PARAMETERS:
*
* xwidth: [m]   Width of opening 
* yheight: [m]  Height of opening 
* zdepth: [m]   zdepth of field 
* B: [T]        Magnetic field along y-direction inside triangle 
*
* OUTPUT PARAMETERS:
*
* %E
*******************************************************************************/

DEFINE COMPONENT Pol_triafield_y
SETTING PARAMETERS (xwidth, yheight, zdepth, B=0)
OUTPUT PARAMETERS(omegaL)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
double IntersectWall(double pos, double vel, double wallpos) {
    /* Function to calculate where the neutron hit the wall */

    if(vel==0)
      return -1;
    
    if(vel>0)
      return (wallpos-pos)/vel;
    else 
      return (-wallpos-pos)/vel;
}

/* In this component, x and y will translate to y and z respectively */
#pragma acc routine
double intersect_lines(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4) {
  double numerator, denominator, t;
  numerator = (x1 - x3) * (y3 - y4) - (y1 - y3)*(x3 - x4);
  denominator = (x1 - x2) * (y3 - y4) - (y1 - y2)*(x3 - x4);
  t = numerator / denominator;
  // This will return the intersection coordinate y, which corresponds to z below
  return y1 + t * (y2 - y1);
}

%}

DECLARE
%{
  /* Larmor frequency */
  double omegaL;
%}

INITIALIZE
%{
  omegaL = 0;  

  double velocity = 0, time = 0;
  
  if ((xwidth<=0) || (yheight<=0) || (zdepth<=0)) {
    fprintf(stderr, "Pol_filter: %s: Null or negative volume!\n"
	    "ERROR      (xwidth, yheight, zdepth). Exiting\n",
	    NAME_CURRENT_COMP);
    exit(1);
  }
  
  omegaL	  = -1.832472e8 * B; // B is in Tesla
  %}

TRACE
%{
  double deltaT, deltaTx, deltaTy, iz1, iz2, sx_in1, sz_in1, deltaTtria;
  
  PROP_Z0;
  if (!inside_rectangle(x, y, xwidth, yheight))
    ABSORB;
  
  // Time spent in Bguide-field
  deltaT = zdepth/vz;
    
  // This calculates the intersections on the xz-plane between the neutron trajectory and the triangular field boundaries
    // The neutron trajectory is given by the points  ( 0,         y,       0) and (     0, y+vy,       vz)
  // The first field boundary is given by the points  ( 0,-yheight/2,       0) and ( 0, yheight/2, zdepth/2)
  // The second field boundary is given by the points ( 0, yheight/2,zdepth/2) and (0, -yheight/2,   zdepth)
  // iz1 and iz2 are the z-values for the intersection
  iz1 = intersect_lines(y,0,y+vy,vz, -yheight/2, 0, yheight/2, zdepth/2);
  iz2 = intersect_lines(y,0,y+vy,vz, yheight/2, zdepth/2, -yheight/2, zdepth);

  // Time spent in triangular B-field
  deltaTtria	= (iz2-iz1)/vz;

  // check that track goes throgh without hitting the walls
  if (!inside_rectangle(x+vx*deltaT, y+vy*deltaT, xwidth, yheight)) {
    
    // Propagate to the wall and absorb
    deltaTx = IntersectWall(x, vx, xwidth/2);
    deltaTy = IntersectWall(y, vy, yheight/2);

    if (deltaTx>=0 && deltaTx<deltaTy)
      deltaT = deltaTx;
    else
      deltaT = deltaTy;
    
    PROP_DT(deltaT);  
    
    ABSORB;
  }  
  
  PROP_DT(deltaT);  
  sx_in1 = sx;
  sz_in1 = sz;
  // This calculated the spin rotation caused by the triangular field
  sz = cos(omegaL*deltaTtria)*sz_in1 - sin(omegaL*deltaTtria)*sx_in1;
  sx = sin(omegaL*deltaTtria)*sz_in1 + cos(omegaL*deltaTtria)*sx_in1;
%}

MCDISPLAY
%{
  
  
  box(0, 0, zdepth/2.0, xwidth, yheight, zdepth);
  multiline(5,-xwidth/2.0,-yheight/2.0,0.0, xwidth/2.0,-yheight/2.0,0.0, xwidth/2.0,yheight/2.0,zdepth/2.0, -xwidth/2.0,yheight/2.0,zdepth/2.0, -xwidth/2.0,-yheight/2.0,0.0);
  multiline(5,-xwidth/2.0,yheight/2.0,zdepth/2.0, xwidth/2.0,yheight/2.0,zdepth/2.0, xwidth/2.0,-yheight/2.0,zdepth, -xwidth/2.0,-yheight/2.0,zdepth, -xwidth/2.0,yheight/2.0,zdepth/2.0);

  %}

END
